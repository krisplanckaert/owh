<?php
/**
 * Abstract controller
 * Provides listing, edit and delete functionality
 */
abstract class My_Controller_Action extends Zend_Controller_Action
{
    /**
     * Form
     * @var object
     */
    protected $form;
    
    /**
     * 
     * Controller have multiple forms
     * @var bool
     */
    protected $formMultiple = FALSE;
   
    protected $parentTab;    
    
    protected $formOptions;
    
    protected $acl;

    protected $model;
    
    protected $mail;
    
    protected $flashMessenger = NULL;
    
    protected $module; 
    protected $controller;
    protected $action;
    
    protected $errorMessages;
    
    //protected $dbIntegrityConstraintErrorCode = 23000; //mysql error code
    
    protected $id = NULL;
    
    protected $dealerRow;
    
    protected $authUser;
    
    protected $modelData;
    
    protected $appName = APPLICATION_NAME;
    
    
    
    /**
     * User has role Winsol processor
     * @var bool,
     */
    protected $isWinsolProcessor;
    protected $isWinsolIntern;
    
        
    /**
     * Do redirect after successfull add/edit
     * set to FALSE if you want to redirect yourself
     */
    protected $doRedirect = TRUE;


    public function preDispatch(){
    	$this->module     = $this->getRequest()->getModuleName(); 
    	$this->controller = $this->getRequest()->getControllerName();
    	$this->action     = $this->getRequest()->getActionName();
    }


    public function init($options = null)
    {
        //$this->dealerRow = Zend_Session::
    	//echo 'jaa'; exit;
		
    	
    	$this->authUser = (array)Zend_Auth::getInstance()->getIdentity();
    	$this->acl  = new My_Acl($this->authUser);
    	$this->mail = new My_Controller_Plugin_Mail();
    	
    	if (!empty($this->authUser)){
    		$dealerModel     = new Share_Models_Dealer();
    		$this->dealerRow = $dealerModel->getOne((int)$this->authUser['ID_Dealer']);
    		$this->isWinsolIntern = $this->dealerRow['WinsolIntern']==1 ? true : false;
    		//$this->authUser['ID_Dealer'] == 3 && 
    		if ($this->acl->hasRole(My_Roles::WINSOL_PROCESS)){
    		//user is winsol processor
    			$this->isWinsolProcessor = true; 
    		}
    	}
    	    	
    	
    	
    	
    	/*
    	if ($this->acl->hasRole('admin')){
    		die('role is admin');    		
    	}
    	echo 'role is dealer';
    	*/
    	//var_dump($this->session);
    	//->sessions = Zend_Session::
    	//echo 'APPLICATION_NAME = ' . APPLICATION_NAME;
    	/*if ($this->appName == 'comfig'){
    		//set some parameters from session
    		$this->selectedProductgroup = Zend_Registry::get('selectedProductgroup');
    	} */
        $this->entity = empty($this->entity) ? strstr(get_class($this), 'Controller', TRUE) : $this->entity;
        if (isset($options['noModel']) && $options['noModel']){
    		$this->model = null;
    	}
    	else {
    		 $model = 'Share_Models_' . ucfirst($this->entity);
       		 $this->model = new $model();
    	}
        $this->flashMessenger = $this->_helper->getHelper('FlashMessenger');
        $this->setErrorMessages();
    }
    
    
    
    
    
    protected function setErrorMessages() {
    	$this->errorMessages = array(
    		'db' => array(
    			'23000' => 'Dublicate key : record already exists',    	
    			),    		
    	);    	    	
    }
    
    public function getAppName()
    {
    	return $this->appName;
    }

	public function getId(){
		return $this->id;
	}
    
    /**
     * Index listing
     */
    public function indexAction()
    {
        $this->view->messages = $this->flashMessenger->getMessages();
        $this->_forward('list');        
    }
    
    public function listAction()
    {    	
		$this->view->dataGrid = $this->model->buildDataGrid();    		
    }     

    
    
    /**
     * Get form
     * 
     * @param string $name : form name
     * @param int $id : id of record, no id = new ; id = edit
     * @param array $options : form options
     * @param array $params : parameters
     * @return object/void
     */
    protected function getForm($name, $id = NULL,$options = NULL, $params = NULL)
    { 
    	
    	//echo '<br />getForm : ' . var_dump($params); 
    	// multiple forms: we need to initialize every form
        if (empty($this->form) || $this->formMultiple) {
        	$prefix = $this->module == 'default' ? 'application' : $this->module; 
            $formObj = ucfirst($prefix) . '_Form_' . $name; 
          //  echo 'form id = ' . $id; exit;
            $this->form = new $formObj($id,$options,$params);
            if ($this->form instanceof My_Form){
            	$this->form->setModel($this->model,$this->modelData);
            }
        }
        // check if this is a jQuery validation call
       // if ($this->getRequest()->isXmlHttpRequest()) { die('xml http request');
        if ($this->getRequest()->isXmlHttpRequest() && $this->_helper->hasHelper('Ajax')) {
           $resp = $this->_helper->getHelper('Ajax')->validateJsonForm($this->form);
           $this->_helper->json($resp);
        }
        return $this->form;
    }
    
    protected function getSharedForm($name, $id = NULL,$options = NULL, $params = NULL)
    {  
        if (empty($this->form) || $this->formMultiple) {
            $formObj = 'Share_Forms_' . $name;
            $this->form = new $formObj($id,$options,$params);
            if ($this->form instanceof My_Form){
            	$this->form->setModel($this->model,$this->modelData);
            }
        }
        // check if this is a jQuery validation call
        if ($this->getRequest()->isXmlHttpRequest() && $this->_helper->hasHelper('Ajax')) {
           $resp = $this->_helper->getHelper('Ajax')->validateJsonForm($this->form);
           $this->_helper->json($resp);
        }
        return $this->form;
    }     
    
    /**
    * Detail, create or update
    */
    public function detailAction($options = NULL)
    {    	
       $this->id = $this->getRequest()->getParam('id'); 
       $this->processDetail($options);        
    }    
    
      /**
     * Create/update
     * Update/add a record
     * @param array $options
     * @param array $params
     */
    protected function processDetail($options = NULL,$params = NULL)
    {
        //echo'processDetail';exit;
        $this->view->messages = $this->flashMessenger->getMessages();
        //echo 'orderId = ' . $this->id;
         //var_dump($this->formOptions);
        $form = $this->getForm(ucfirst($this->entity),$this->id,$this->formOptions,$params);       
        $this->view->form = $form;
        $form->isModelData = FALSE; 
        //Zend_Debug::dump($_POST); exit;
        //echo 'parent tab = ' . $this->parentTab . ' | selectedTab = ' . $this->selectedTab; exit;
        if (!$this->getRequest()->isPost() || (!empty($this->parentTab) && $this->selectedTab!=$this->parentTab) ) {
        //no post, populate form with model data
        	if (!empty($this->id)){  
        		$form->isModelData = TRUE;
                $formData=(array)$this->model->getOne($this->id);
				//Zend_Debug::dump($formData);exit;
            	$form->populate($formData);
        	} 
        	else{
        		if (!empty($params)){
        			$form->populate($params);
        		}
        	}
            return;
        }        
        $formData  = $this->_request->getPost();
        //Zend_Debug::dump($formData);exit;
        //Zend_Debug::dump($formData); echo 'id : '.$this->id; exit;
        //delete?
        	if (!empty($this->id) && (isset($formData['btn_softDelete_x']) ||  (isset($formData['btn_softDelete']) && $formData['btn_softDelete']==1))) {        		
        		$totalAffected = $this->model->softDeleteById($this->id);  
        		$this->flashMessenger->addMessage('Delete OK');           
            	$this->_redirect('/' . $this->getRequest()->getControllerName().'/index');
        		exit;      	
       		}
        //save
        // Zend_Debug::dump($formData,'formData get values');
       // echo 'id = ' . $this->id; exit;
        if (!$form->isValid($formData)) { 
        //form not valid, return
            //echo '=> form not valid';
            $form->populate($formData);
            return;
        }

        
        $defaultOptions = array(
            'redirect'     =>  '/' . $this->getRequest()->getControllerName().'/index',
        	'redirectToId' => FALSE,
        );
        $options = !empty($options) ? array_merge($defaultOptions,$options) : $defaultOptions ;

        // form is valid, try to save
        try {
            $id = $this->model->save($form->getValues(), $this->id); 
            $options['redirect'] .= !empty($options['redirectToId']) ? '/'.(int)$id : '';
            $this->flashMessenger->addMessage('Save OK');           
            $this->_redirect($options['redirect']);
        }
        catch (Exception $e) {
        	//die($e->getMessage());
        	//if ($e->getCode() == $this->dbIntegrityConstraintErrorCode){
        		//Integrity constraint violation
        	//		$form->addError($this->errorMessages['db'][$this->dbIntegrityConstraintErrorCode]);
        	//}
        	//else {
            	$form->addError($e->getCode().' : '.$e->getMessage());
        	//}
            //die($e->getCode().' : '.$e->getMessage());
            return;
        }		
    }
    
/**
     * Create/update a child form 
     * A child always have a parent
     * @param array $options
     * @params array $params
     */
    protected function processChildDetail($options = NULL,$params = NULL)
    {

        $this->view->messages = $this->flashMessenger->getMessages();
        //$modelName = 'Share_Models_' . ucfirst($this->child['model']);
        //$childModel = new $modelName;
        //echo 'orderId = ' . $this->id;
        // Zend_Debug::dump($params,'process child details tab ' . $params['tabName']); //var_dump($this->formOptions);
        $form = $this->child['form']; //$this->getForm(ucfirst($this->child['form']),$this->child['id'],$this->formOptions,$params);
        if (!is_object($form)){
        	throw new Exception('Process child detail, form is not an object');
        	return;
        }
                
        //$this->view->form = $form;
        $this->view->tabs[$params['tabName']]['form'] = $form;
        //$allPost = $this->getRequest()->isPost();
        $formData  = $this->getRequest()->isPost() ? $this->_request->getPost() : null;
        $tabPost   = $this->getRequest()->isPost() && !empty($formData) && $params['tabName'] == $formData['tabName'] ? $formData : null;
		$form->isModelData = FALSE; 
        //if (!$this->getRequest()->isPost()) {
        if (empty($tabPost)) {
        //no post, populate form with model data
			//echo 'child ID = ' . $this->child['id'];
        	//echo 'no post, child id = ' . $this->child['id']; exit; 
        	if (!empty($this->child['id'])){    //die('ok!!');
        		//Zend_Debug::dump($this->child['model']); exit; //->getOne($this->child['id']));exit();
        			//Zend_Debug::dump($this->child['model']->getOne($this->child['id']));exit();
        			$form->isModelData = TRUE; 
                    $form->populate((array)$this->child['model']->getOne($this->child['id']));
        	} 
        	else{
        		if (!empty($params)){
        			$form->populate($params);
        		}
        	}
            return; // $form;
        }        
        //$formData  = $this->_request->getPost();

        //Zend_Debug::dump($params,'params get values');
        //Zend_Debug::dump($formData,'formData get values');
        //echo 'id = ' . $this->id; exit;
        //Zend_Debug::dump($this->child);
         //Zend_Debug::dump($formData); echo '=> id : '.$this->id; exit;
        //delete?
        	if (!empty($this->child['id']) && (isset($formData['btn_softDelete_x']) ||  (isset($formData['btn_softDelete']) && $formData['btn_softDelete']==1))){
        		$totalAffected = $this->child['model']->softDeleteById($this->child['id']);  
        		//echo 'totalAffected ' . $totalAffected; exit;
        		$this->flashMessenger->addMessage('Delete OK');           
            	$this->_redirect('/' . $this->getRequest()->getControllerName(). '/detail/id/'.$this->id.'/tab/'.$this->selectedTab);
        		exit;      	
       		}        
        if (!$form->isValid($formData)) {  //die('c');
        	//Zend_Debug::dump($form->getMessages());
        //form not valid, return
            //echo '=> form not valid';
            $form->populate($formData);
            return; // $form;
        }
        $defaultOptions = array(
            'redirect'     =>  '/' . $this->getRequest()->getControllerName().'/detail/id/'.$this->id.'/tab/'.$this->selectedTab ,
        	'redirectToId' => TRUE,
        	'childName'	   => 'childId',
        );
        $options = !empty($options) ? array_merge($defaultOptions,$options) : $defaultOptions ;
        //Zend_Debug::dump($options['redirect']);
        // form is valid, try to save
        try {        	
        	//$data = $form->getValues();
        	//$data['parentId'] = $data
        	//Zend_Debug::dump($form->getValues(),'form get values');
        	//echo 'form child id = ' . $this->child['id']; exit;
            $childId = $this->child['model']->save($form->getValues(), $this->child['id']);
            $options['redirect'] .= !empty($options['redirectToId']) ? '/' . $options['childName'] . '/'.(int)$childId : '';
            $this->flashMessenger->addMessage('Save OK');           
            $this->_redirect($options['redirect']);
        }
        catch (Exception $e) {
        	//die('=> ' . $e->getCode() . ': ' . $e->getMessage());
        	if (APPLICATION_ENV == 'development'){
        		$form->addError($e->getCode().' : '.$e->getMessage());
        	}
        	else if ($e->getCode() == $this->dbIntegrityConstraintErrorCode){
        		//Integrity constraint violation
        			$form->addError($this->errorMessages['db'][$this->dbIntegrityConstraintErrorCode]);
        	}
        	else {
        		//die($e->getCode().' : '.$e->getMessage());
            	$form->addError($e->getCode().' : '.$e->getMessage());
        	}
            //die($e->getCode().' : '.$e->getMessage());
            return; // $form;
        }		
    }  
    

        

    
    
    
    
   
}
